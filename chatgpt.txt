我突然想到另個方法,我想先從fetchInsureanceDocs的地方埋一個index的物件,用來記錄它signature它本身所在的位置
groupedSignatures 裡在sigIndex地方加入的index, 如圖所示sigIndex它是跟著signature 的index


import { defineStore } from 'pinia';
import { computed, ref } from 'vue';
import { fromArrayBuffer } from 'geotiff'
import { getSignatureDoc } from '@/service/documentSignature';
import { typeMapRole } from '@/utility/roleMap';



export const useInsureanceStore = defineStore('insureance', () => {
  type Stage = 'preview' | 'sign1' | 'sign2';
  type SignStatus = 'unselected' | 'unsigned' | 'signed';
  const insureanceData = ref<any[]>([]);
  const stage = ref<Stage>('preview');
  const currentRole = ref({ index: 0, type: 0 })
  const currentPage = ref(0);
  const renderedCanvas = ref(null);
  const isLoading = ref(true)
  const scrollContainerRef = ref(null);
  const signatureButton = ref<any[]>([]);
  const currentDocs = computed(() => insureanceData.value);
  const originalStatusMap = ref<Record<number, { status: SignStatus; type: number }>>({});
  const navbarHeight = ref<number>(0)
  const allCurrentRoleSigned = computed(() => {
    return signatureButton.value
      .filter(item => item.type === currentRole.value)
      .every(item => item.signimg?.trim());
  });



  //是否啟用下一步的按鈕
  const enableNextButton = computed(() => {
    if (stage.value === 'preview') {
      return insureanceData.value.every(doc => doc.readComplete);
    }
    if (stage.value === 'sign1') {
      return signatureButton.value.every(doc => doc.signimg)
    }
    return false;
  });


  // 後端傳來的資料做好整理後放至insureanceData
  async function fetchInsureanceDocs() {
    const data = await getSignatureDoc();
    originalStatusMap.value = {};
    if (!data) return;

    const { form, sign } = data;

    // 將 sign 根據 form 分組
    const groupedSignatures = sign.reduce((acc: Record<string, any[]>, sig) => {
      if (!acc[sig.form]) {
        acc[sig.form] = [];
      }
      acc[sig.form].push({
        ...sig,
        type: parseInt(sig.type),
        sigIndex:0
      });
      return acc;
    }, {});

    // 將 form 結合對應的 signature
    const transformedData = await Promise.all(
      form.map(async (item, index) => {
        const documentHeight = await getImageHeight(item.docSource);
        originalStatusMap.value[index] = {
          status: 'unselected',
          type: 9
        }
        return {
          ...item,
          pageIndex: index,
          signature: groupedSignatures[item.form] || [],
          pageHeight: 0,
          documentHeight,
        };
      })
    );

    insureanceData.value = transformedData;
    transformToSignatureButtons(transformedData);
  }

  //再將資料重整至signatureButton
  async function transformToSignatureButtons(docs: any[]) {
    signatureButton.value = []; // 清空之前的資料
    for (const doc of docs) {
      const documentHeight = await getImageHeight(doc.docSource);
      for (const sig of doc.signature || []) {
        const status: SignStatus = sig.signimg?.trim() ? 'signed' : 'unselected';
        const type = parseInt(sig.type);
        const index = signatureButton.value.length;

        signatureButton.value.push({
          ...sig,
          type,
          pageIndex: doc.pageIndex,
          form: doc.form,
          docSource: doc.docSource,
          signedStatus: status,
          documentHeight,

        });
      }
    }
    setFirstPageCurrentRole()
  }

  function setFirstPageCurrentRole() {
    const first = signatureButton.value[0];
    currentRole.value = first ? { index: 0, type: first.type } : { index: 0, type: 0 };
    switchRoleToButton(0)
  }

  //取得每個圖片的高度
  function getImageHeight(src: string): Promise<number> {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.src = src;
      img.onload = () => resolve(img.height);
      img.onerror = reject;
    });
  }

  //角色列按鈕
  const signatureRoleType = computed(() => {
    const roleMap = new Map<number, Record<number, { pageIndex: number, documentHeight: number, pageHeight: number, signId: string; signimg: string; xy: string }>>();

    for (const doc of insureanceData.value) {
      const pageIndex = doc.pageIndex;
      for (const sig of doc.signature || []) {
        const type = parseInt(sig.type);
        if (!roleMap.has(type)) {
          roleMap.set(type, {});
        }

        // 如果這頁中已有該角色，跳過避免覆蓋（根據你資料結構，每頁一個type對應一筆簽名）
        if (!roleMap.get(type)![pageIndex]) {
          roleMap.get(type)![pageIndex] = {
            signId: sig.signId,
            signimg: sig.signimg,
            xy: sig.xy,
            documentHeight: doc.documentHeight,
            pageHeight: doc.pageHeight,
            pageIndex: doc.pageIndex,
          };
        }
      }
    }

    // ✅ 產生完整的 signatureRoleType 陣列，並生成 buttonStatus
    const result = Array.from(roleMap.entries()).map(([type, pageMap]) => {
      const buttonStatus: SignStatus[] = [];
      const totalPages = insureanceData.value.length;

      for (let i = 0; i < totalPages; i++) {
        if (pageMap[i]) {
          buttonStatus.push(pageMap[i].signimg?.trim() ? 'signed' : 'unsigned');
        } else {
          buttonStatus.push('unselected');
        }
      }

      return {
        type,
        name: typeMapRole[type] || `未知角色 ${type}`,
        pageIndex: pageMap,
        allSignedComplete: false,
        buttonStatus
      };
    });

    return result;
  });


  function switchRoleToButton(index: number) {
    const docs = currentDocs.value;
    const role = signatureRoleType.value[index];

    // 根據對應角色的 buttonStatus，逐頁更新 currentDocs 中的 buttonStatus
    role.buttonStatus.forEach((status, pageIndex) => {
      if (docs[pageIndex]) {
        docs[pageIndex].buttonStatus = status;
      }
    });
  }


  //引用Canvas組件的參考
  function setScrollContainer(el: any) {
    scrollContainerRef.value = el;
  }


  async function renderInsureanceDoc(doc: any): Promise<HTMLCanvasElement | null> {
    const base64 = doc.docSource;

    return new Promise((resolve, reject) => {
      const img = new Image();
      img.src = base64;
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;

        const ctx = canvas.getContext('2d');
        if (!ctx) return reject(new Error('無法取得 CanvasRenderingContext2D'));
        ctx.drawImage(img, 0, 0);


        if (stage.value !== 'preview') {
        }
        const highlights = (doc.signature || []).map(sig => ({
          xy: sig.xy,
          color: '#eb949459'
        }));

        // 畫框
        highlights.forEach(({ xy, color }) => {
          const [x, y, width, height] = xy.split(',').map(Number);
          ctx.fillStyle = color;
          ctx.fillRect(x, y, width, height);
        });

        canvas.addEventListener('mousemove', (event) => {
          const rect = canvas.getBoundingClientRect(); // 取得畫布相對位置
          const scaleX = canvas.width / rect.width;
          const scaleY = canvas.height / rect.height;

          const mouseX = (event.clientX - rect.left) * scaleX;
          const mouseY = (event.clientY - rect.top) * scaleY;

          // console.log(`🖱️ 滑鼠在 canvas 座標: (${mouseX.toFixed(2)}, ${mouseY.toFixed(2)})`);
        });
        resolve(canvas); // ✅ 回傳 canvas

      };
      img.onerror = (err) => reject(err);
    });
  }


  //換頁籤切換功能
  async function switchPage({ index = currentPage.value, type = '' }) {
    isLoading.value = false
    currentPage.value = index;
    scrollToPage(currentPage.value);
    //需已閱讀才能跳頁
    // if (salesDocPreview.value[currentPage.value].readComplete) {
    //   currentPage.value = index;
    //   scrollToPage(currentPage.value);
    // }
  }

  //滑行滾輪移動到該頁
  function scrollToPage(pageIndex: number) {

    const el = scrollContainerRef.value?.$el || scrollContainerRef.value;
    if (!(el instanceof HTMLElement)) return;

    let targetTop = 0;

    for (let i = 0; i < pageIndex; i++) {
      const doc = currentDocs.value[i];
      const height = (stage.value === 'preview' && 'pageHeight' in doc) ? doc.pageHeight : 0;
      targetTop += height;
    }

    el.scrollTo({
      top: targetTop,
      behavior: 'auto'
    });


    console.log(`🔍 滾動至第 ${pageIndex + 1} 頁，位置 ${targetTop}px`);
  }

  //上、下按鈕切換
  function switchSignButton({ index = currentPage.value, type = '' }) {
    const role = signatureRoleType.value[currentRole.value.index];
    const pageKeys = Object.keys(role.pageIndex).map(k => Number(k)).sort((a, b) => a - b);
    const currentIdx = pageKeys.findIndex(k => k === currentPage.value);

    if (type === 'next') {
      const nextIdx = currentIdx + 1;

      if (nextIdx < pageKeys.length) {
        const nextKey = pageKeys[nextIdx];
        currentPage.value = nextKey;
        const sig = role.pageIndex[nextKey];
        console.log(`➡️ 下一頁 index: ${nextKey}, xy: ${sig.xy}`);
        console.log(`nextKey => `, nextKey)
        // console.log(`pageKeys => `,pageKeys)
        // console.log(`nextIdx => `, nextIdx)
        skipToSignPosition(nextKey.toString(), 'button')
      } else {
        const allSigned = Object.values(role.pageIndex).every(item => item.signimg?.trim());
        if (!allSigned) {
          alert('您尚未簽署完畢');
          return;
        }
        const nextRoleIdx = currentRole.value.index + 1;
        if (nextRoleIdx < signatureRoleType.value.length) {
          currentRole.value = {
            index: nextRoleIdx,
            type: signatureRoleType.value[nextRoleIdx].type
          };
          const firstKey = Number(Object.keys(signatureRoleType.value[nextRoleIdx].pageIndex)[0]);
          currentPage.value = firstKey;
          console.log(`firstKey => `, firstKey)
          role.allSignedComplete
          switchRoleToButton(nextRoleIdx)
          skipToSignPosition(firstKey.toString(), 'button')
          console.log(`➡️ 切換角色至 index: ${firstKey}`);

        }
      }
    } else if (type === 'last') {
      const prevIdx = currentIdx - 1;
      if (prevIdx >= 0) {
        const prevKey = pageKeys[prevIdx];
        currentPage.value = prevKey;
        const sig = role.pageIndex[prevKey];
        console.log(`⬅️ 上一頁 index: ${prevKey}, xy: ${sig.xy}`);
        skipToSignPosition(prevKey.toString(), 'button')
      } else {
        const prevRoleIdx = currentRole.value.index - 1;
        if (prevRoleIdx >= 0) {
          currentRole.value = {
            index: prevRoleIdx,
            type: signatureRoleType.value[prevRoleIdx].type
          };
          const lastKeys = Object.keys(signatureRoleType.value[prevRoleIdx].pageIndex).map(k => Number(k)).sort((a, b) => a - b);
          const lastKey = lastKeys[lastKeys.length - 1];
          currentPage.value = lastKey;
          const sig = signatureRoleType.value[prevRoleIdx].pageIndex[lastKey];
          switchRoleToButton(prevRoleIdx)
          skipToSignPosition(lastKey.toString(), 'button')
          console.log(`⬅️ 切換角色至 index: ${lastKey}, xy: ${sig.xy}`);
        }
      }
    } else {
      currentPage.value = index;
    }
  }


  //跳到簽名的位置
  function skipToSignPosition(positionIndex: string = '', type: string) {
    const el = scrollContainerRef.value?.$el || scrollContainerRef.value;
    if (!(el instanceof HTMLElement)) return;
    const roleIndex = currentRole.value.index
    const target = signatureRoleType.value[roleIndex].pageIndex[positionIndex];
    console.log(`target => `, target)
    const [x, y, width, height] = target.xy.split(',').map(Number);
    const { pageIndex, pageHeight, documentHeight } = target;

    let targetTop = 0;

    if (type === 'button') {
      // ✅ 正確地從 currentDocs 計算前面頁面的總高度
      const accumulatedHeight = (pageHeight || 0) * (pageIndex || 0);

      const yOffset = (pageHeight / documentHeight) * y;

      targetTop = accumulatedHeight + yOffset - navbarHeight.value;

      // console.log('📌 scrollTo 詳細資訊：');
      // console.log('pageIndex:', pageIndex);
      // console.log('accumulatedHeight:', accumulatedHeight);
      // console.log('yOffset:', yOffset);
      // console.log('navbarHeight:', navbarHeight.value);
      // console.log('targetTop:', targetTop);
    }

    el.scrollTo({
      top: targetTop,
      behavior: 'instant',
    });
  }



  return {
    stage,
    navbarHeight,
    insureanceData,
    currentPage,
    currentRole,
    originalStatusMap,
    switchPage,
    skipToSignPosition,
    switchSignButton,
    switchRoleToButton,
    renderInsureanceDoc,
    renderedCanvas,
    isLoading,
    scrollContainerRef,
    setScrollContainer,
    scrollToPage,
    enableNextButton,
    currentDocs,
    fetchInsureanceDocs,
    signatureButton,
    signatureRoleType,
    allCurrentRoleSigned,
  };
});


